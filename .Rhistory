load("~/R_Working/.RData")
library("Swirl")
library("swirl")
swirl()
airquality$Month
table(airquality$Month)
boxplot(Ozone~Month,data=airquality)
boxplot(Ozone~Month,data=airquality,xlab="Month",ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
length(par)
length(par())
names(par())
par()$pin
par('fg')
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
may<-subset(airquality,month=5)
may<-subset(airquality,Month=5)
may<-subset(airquality,Month==5)
points(may$Wind.may$Ozone,pch=24,color="blue")
points(may$Wind.may$Ozone,pch=24,col="blue")
points(may$Wind.may$Ozone,pch=17,col="blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality,Month!=5)
points(may$Wind,may$Ozone,pch=17,col="red")
points(notmay$Wind,notmay$Ozone,pch=8,col="red")
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend(topright,pch=c(17,8),col=("blue","red"),("May","Other Months"))
legend(topright,pch=c(17,8),col=("blue","red"),legend=("May","Other Months"))
legend(topright,pch=c(17,8),col=c("blue","red"),legend=("May","Other Months"))
legend(topright,pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
lines(median(airquality$Wind),lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone)
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow=c(1,3),mar=c(4,4,2,1),oma=c(0,0,2,0))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Solar.R,airquality$Ozone,main="Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main="Ozone and Temparature")
plot(airquality$Temp,airquality$Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,data=airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind,data=airquality,pch=8,col="red",main="Big Apple Data")
xyplot(Ozone~Wind|as.factor(Month),airquality,layout=c(5,1))
xyplot(Ozone~Wind|Month,airquality,layout=c(5,1))
p<-xyplot(Ozone~Wind,airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabela.R")
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price_carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p2<-colorRampPalette(c("blue","green"),alpha=0.5)
p2<-colorRampPalette(c("blue","green"),alpha=.5)
p3<-colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,0.5,0.5))
plot(x,y,pch=19,col=rgb(0,0.5,0.5,alpha=.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,aesthetic=drv)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,color=drv,facets=.~drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=.~drv,binwidth=2)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g<-ggplot(aes(displ,hwy))
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=0.5)
g+geom_point(size=4,alpha=0.5,aes(color=drv))
g+geom_point(size=4,alpha=0.5,aes(color=drv))+labs("Swirl Rules!")
g+geom_point(aes(color=drv))+labs("Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs("Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv),size=2,alpha=0.5)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g<-ggplot(testdat,aes(x=myx,y=myy))
g+geom_points()
g+geom_point()
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(title="Swirl Rules!",x="Displacement",y="Highway Mileage")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
library("swirl")
swirl()
library("Swirl")
library("swirl")
swirl()
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(string="lm")
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(method="lm")
qplot(carat,price,data=diamonds,color=cut,facets=.~cut)+geom_smooth(method="lm")
g<-ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$cars2<-cut(diamonds$carat,cutpoints)
diamonds$car2<-cut(diamonds$carat,cutpoints)
g<-ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
g<-ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
healthdata
datareq
library(ggplot2)
library(dplyr)
library(reshape2)
if(!file.exists("/StormData.csv.bz2")){
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",destfile="./StormData.csv.bz2")
}
data <- read.csv(bzfile("StormData.csv.bz2"), sep=",", header=T)
head(data)
datareq<-data[ , c(8, 23:28)]
head(datareq)
summary(datareq$FATALITIES)
summary(datareq$INJURIES)
totalinjuries <- aggregate(INJURIES~EVTYPE, datareq, sum)
totalinjuries <- arrange(totalinjuries, desc(INJURIES))
head(totalinjuries)
totalfatalities <- aggregate(FATALITIES~EVTYPE, datareq, sum)
totalfatalities <- arrange(totalfatalities, desc(FATALITIES))
head(totalfatalities)
healthdata <- merge(totalfatalities, totalinjuries, by.x = "EVTYPE", by.y = "EVTYPE")
healthdata<- mutate(healthdata, totalhealth = healthdata$FATALITIES + healthdata$INJURIES)
healthdata<-arrange(healthdata,desc(totalhealth))
namesevents <- healthdata$EVTYPE
with(healthdata,barplot(totalhealth,names.arg=EVTYPE,las=2,col="steelblue", ylab="Damage", main="Storm event types harmful to population health"))
datareq[datareq$PROPDMGEXP == "H", ]$PROPDMG = datareq[datareq$PROPDMGEXP == "H", ]$PROPDMG * 10^2
datareq[datareq$PROPDMGEXP == "K", ]$PROPDMG = datareq[datareq$PROPDMGEXP == "K", ]$PROPDMG * 10^3
datareq[datareq$PROPDMGEXP == "M", ]$PROPDMG = datareq[datareq$PROPDMGEXP == "M", ]$PROPDMG * 10^6
datareq[datareq$PROPDMGEXP == "B", ]$PROPDMG = datareq[datareq$PROPDMGEXP == "B", ]$PROPDMG * 10^9
datareq[datareq$CROPDMGEXP == "H", ]$CROPDMG = datareq[datareq$CROPDMGEXP == "H", ]$CROPDMG * 10^2
datareq[datareq$CROPDMGEXP == "K", ]$CROPDMG = datareq[datareq$CROPDMGEXP == "K", ]$CROPDMG * 10^3
datareq[datareq$CROPDMGEXP == "M", ]$CROPDMG = datareq[datareq$CROPDMGEXP == "M", ]$CROPDMG * 10^6
datareq[datareq$CROPDMGEXP == "B", ]$CROPDMG = datareq[datareq$CROPDMGEXP == "B", ]$CROPDMG * 10^9
econdamage <- aggregate(PROPDMG + CROPDMG ~ EVTYPE, datareq, sum)
names(econdamage) = c("EVENTTYPE", "TOTALDAMAGE")
econdamage <- arrange(econdamage, desc(TOTALDAMAGE))
econdamage <- econdamage[1:20, ]
econdamage$TOTALDAMAGE <- econdamage$TOTALDAMAGE/10^9
econdamage$EVENT_TYPE <- factor(econdamage$EVENTTYPE, levels = econdamage$EVENTTYPE)
head(econdamage)
with(econdamage, barplot(TOTALDAMAGE, names.arg = EVENTTYPE, beside = T, cex.names = 0.8, las=2, col = "light blue", main = "Economic Damage vs Event Types", ylab = "Total Damage(USD)"))
healthdata
head(healthdata)
with(healthdata,barplot(totalhealth,names.arg=EVTYPE,las=2,col="steelblue", ylab="Damage", main="Storm event types harmful to population health"))
barplot(healthdata$totalhealth,main="Storm event types harmful to population health",xlab="Events", names.arg=healthdata.EVTYPE)
barplot(healthdata$totalhealth,main="Storm event types harmful to population health",xlab="Events", names.arg=healthdata$EVTYPE)
barplot(healthdata$totalhealth,main="Storm event types harmful to population health",xlab="Events", names.arg=healthdata$EVTYPE,ylab="Population Damage")
healthdata$totalhealth
head(healthdata$totalhealth)
head(healthdata$EVTYPE)
barplot(healthdata,main="Storm event types harmful to population health",xlab="Events", names.arg=healthdata$EVTYPE,ylab="Population Damage")
barplot(healthdata[1:20,]$totalhealth,main="Storm event types harmful to population health",xlab="Events", names.arg=healthdata$EVTYPE,ylab="Population Damage")
hd<-healthdata[1:20,]
barplot(hd$totalhealth,main="Storm event types harmful to population health",xlab="Events", names.arg=healthdata$EVTYPE,ylab="Population Damage")
barplot(hd$totalhealth,main="Storm event types harmful to population health",xlab="Events", names.arg=hd$EVTYPE,ylab="Population Damage")
clear
clearPushBack()
library("swirl")
swirl()
install_from_swirl("Statistical Inference")
swirl()
11/12
deck
1/52
52
1/13
0
12/52
2/51
0.62
0.64
0.64
mypdf
integrate(lower=0,upper=1.6)
integrate(mypdf,lower=0,upper=1.6)
1
1.414
info()
2^1/2
1.4
1.41
2^2
2^0.5
0.997*0.001
0.015*0.999
0.000997/(0.000997+0.014985)
1
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
edh+edl/2
(edh+edl)/2
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
install.packages(tinytex)
tinytex::install_tinytex()
tinytex::tinytex_root()
uninstall_tinytex()
uninstall_tinytex()
uninstall_tinytex(force = FALSE, dir = tinytex_root())
tinytex::uninstall_tinytex()
install.packages('tinytex')
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::is_tinytex()
tinytex:::is_tinytex()
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages("Applied{redictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
names(AlzheimerDisease)
ls(name="AlzheimerDisease:datasets")
search()
summary(AlzheimerDisease)
summary("AlzheimerDisease")
data(concrete)
library(caret)
install.packages("caret")
library("caret")
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
names(AlzheimerDisease)
training_data<-read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
testing_data<--read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
testing_data<-read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
head(training_data)
dim(training_data)
names(training_data)
head(training_data)$classe
dim(testing_data)
sum(training_data)
import(dplyr)
library(dplyr)
training_data %>% select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.))))
dim(testing_data)
dim(training_data)
names(testing_data)
names(training_data)
modeldata<-read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
colnames(modeldata)
colnames(modeldata)[1]
colnames(modeldata)[mean(is.na())>0.95]
colnames(modeldata)[mean(is.na(modeldata))>0.95]
mean(is.na(modeldata))>0.95
which(mean(is.na(modeldata))>0.95)
which(colMeans(is.na(modeldata))>0.95)
names(which(colMeans(is.na(modeldata))>0.95))
dim(modeldata[,-names(which(colMeans(is.na(modeldata))>0.95))])
dim(modeldata[,-colNames(which(colMeans(is.na(modeldata))>0.95))])
dim(modeldata[,-colnames(which(colMeans(is.na(modeldata))>0.95))])
nacols<-names(which(colMeans(is.na(modeldata))>0.95))
nacols
dim(modeldata[,-nacols])
modeldata[,-nacols]
nacols<-data.frame(nacols)
dim(modeldata[,-nacols])
modeldata[,-nacols]
nacols
names(nacols)
colnames(nacols)
which(colMeans(is.na(modeldata))>0.95))
which(colMeans(is.na(modeldata))>0.95)
modeldatanonna <- modeldata[, colSums(is.na(modeldata)) == 0]
dim(modeldatanonna)
nzv <- nearZeroVar(modeldatanonna)
modeldata <- modeldata[, colSums(is.na(modeldata)) == 0]
nzv <- nearZeroVar(modeldata)
modeldata <- modeldata[,-nzv]
dim(modeldata)
import(dplyr)
library(dplyr)
library(ggplot)
library(dplyr)
library(ggplot2)
library(caret)
library(rplot)
library(dplyr)
library(ggplot2)
library(caret)
library(rpart)
modeldata<-read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
testdata<-read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
modeldata <- modeldata[, colSums(is.na(modeldata)) == 0]
testdata<-testdata[, colSums(is.na(testdata)) == 0]
nzv <- nearZeroVar(modeldata)
modeldata <- modeldata[,-nzv]
testdata <- testdata[,-nzv]
inTrain  <- createDataPartition(modeldata$classe, p=0.6, list=FALSE)
trainingdataset<-modeldata[inTrain,]
testdataset<-modeldata[-inTrain,]
dim(trainingdataset)
dim(testdataset)
dtreefit <- train(classe ~ ., data = trainingdataset, method="rpart")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(dplyr)
library(ggplot2)
library(caret)
library(rpart)
library(dplyr)
library(ggplot2)
library(caret)
library(rpart)
modeldata<-read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
testdata<-read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
modeldata <- modeldata[, colSums(is.na(modeldata)) == 0]
testdata<-testdata[, colSums(is.na(testdata)) == 0]
nzv <- nearZeroVar(modeldata)
modeldata <- modeldata[,-nzv]
testdata <- testdata[,-nzv]
inTrain  <- createDataPartition(modeldata$classe, p=0.6, list=FALSE)
trainingdataset<-modeldata[inTrain,]
testdataset<-modeldata[-inTrain,]
dim(trainingdataset)
dim(testdataset)
dtreefit <- train(classe ~ ., data = trainingdataset, method="rpart")
fancyRpartPlot(dtreefit)
library(dplyr)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(rpart.plot)
library(dplyr)
library(ggplot2)
library(caret)
library(rpart)
library(RColorBrewer)
library(rattle)
install.packages("rpart.plot")
install.packages("rattle")
library(dplyr)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
modeldata<-read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
testdata<-read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
modeldata <- modeldata[, colSums(is.na(modeldata)) == 0]
testdata<-testdata[, colSums(is.na(testdata)) == 0]
nzv <- nearZeroVar(modeldata)
modeldata <- modeldata[,-nzv]
testdata <- testdata[,-nzv]
inTrain  <- createDataPartition(modeldata$classe, p=0.6, list=FALSE)
trainingdataset<-modeldata[inTrain,]
testdataset<-modeldata[-inTrain,]
dim(trainingdataset)
dim(testdataset)
dtreefit <- train(classe ~ ., data = trainingdataset, method="rpart")
fancyRpartPlot(dtreefit)
dtreefit <- train(classe ~ ., data = trainingdataset, method="rpart")
rpart.plot(dtreefit$finalModel, roundint=FALSE)
dtreefit <- train(classe ~ ., data = trainingdataset, method="rpart")
rpart.plot(dtreefit$finalModel, roundint=FALSE)
dtreeprediction <- predict(dtreefit, testdataset)
confusionMatrix(dtreeprediction, testdataset$classe)
rforestfit <- train(classe ~ ., data = trainingdataset, method = "rf", ntree = 100)
library(dplyr)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
modeldata<-read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
testdata<-read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
modeldata <- modeldata[, colSums(is.na(modeldata)) == 0]
testdata<-testdata[, colSums(is.na(testdata)) == 0]
nzv <- nearZeroVar(modeldata)
modeldata <- modeldata[,-nzv]
testdata <- testdata[,-nzv]
inTrain  <- createDataPartition(modeldata$classe, p=0.6, list=FALSE)
trainingdataset<-modeldata[inTrain,]
testdataset<-modeldata[-inTrain,]
dim(trainingdataset)
dim(testdataset)
dtreefit <- train(classe ~ ., data = trainingdataset, method="rpart")
rpart.plot(dtreefit$finalModel, roundint=FALSE)
dtreeprediction <- predict(dtreefit, testdataset)
confusionMatrix(dtreeprediction, testdataset$classe)
rforestfit <- train(classe ~ ., data = trainingdataset, method = "rf", ntree = 100)
gboostfit<-train(classe ~ ., data = trainingdataset, method = "gbm", verbose = FALSE)
gboostfit<-train(classe ~ ., data = trainingdataset, method = "gbm", verbose = FALSE)
